# //-----------------/This module's name is 'player_class'/------------------//
# //-----------------/prev module is 'None'/-------------------------------//
# //--------/first,second,third,fourth : import module/--------------------//
# //--------/fifth,sixth : initializing variables/--------------------------//
# //--------/seventh,eighth,ninth : define/---------------------------------//
# //---------------------/Notice End/-----------------------------------------//


# first import pico2d
from pico2d import *
# second import game_framework - keyword 'as' is only use game_framework
import game_framework as gf
# third import next module

# fourth import need module
import math

# fifth initializing module variables(for using to any modul)

# sixth initializing global variables(for only using this module)
running = True



# seventh define class

class clPlayerBody:
    global player

    def __init__(self):
        self.pressing = False
        self.keyType = None
        self.x, self.y = 100, 100  # X & Y == center's X & Y
        self.fx,self.fy = self.x, self.y+100
        self.hp, self.speed = 10, 10.0  # state
        #test
        self.tx, self.ty = 300, 200
        self.rota = 0
        self.dir = 0
        self.rotateR, self.rotateL = 0, 0  # rotate

        self.image = load_image("../res/object/character/player_body_pix.png")
        # loading state 에서 받자
        self.roImage = None  # image

    def draw(self):
        #self.image.rotate_draw(self.rota, self.x,self.y)
        at = (2*math.pi)*(self.rota/36)
        self.image.composite_draw(at,"",self.x ,self.y )
        #print((2*math.pi)*(self.rota/36))

        #self.image.composite_draw()


    def update(self):
        if self.pressing == True:

            #ox= math.fabs((self.fx - self.x))
            #oy = math.fabs((self.fy - self.y))
            #print(ox,oy)
            #self.tx = ((math.cos(self.rota) * ox) + (-math.sin(self.rota) * oy))
            #self.ty = ((math.sin(self.rota) * ox) + (math.cos(self.rota) *oy))
            #print(self.tx, self.ty)

            if self.keyType == SDLK_RIGHT:
                self.rota -= 1

                #print(self.x)
                #print(math.cos(self.rota)*self.x)

                self.pressing = False
            if self.keyType == SDLK_LEFT:
                self.rota +=1
                self.pressing = False
            if self.keyType == SDLK_UP:
                self.y +=1
            if self.keyType == SDLK_DOWN:
                self.y -=1






    # def handle_event(self):
    #   pass


# eighth define function

# ninth redefine game_framework's function
def enter():
    global player
    player = clPlayerBody()


def exit():
    pass


def draw():
    global player
    clear_canvas()
    # 여기부분 없애기
    player.draw()

    update_canvas()
    # 여기부분 없애기 어차피 stage에서 모두 클리어후에 작업할것이기 때문에


def update():
    global player
    player.update()


def handle_events():
    global player
    events = get_events()
    for event in events:
        if event.type == SDL_QUIT:
            gf.quit()
        if event.type == SDL_KEYDOWN:
            player.pressing = True
            player.keyType = event.key
            # 왜 끊키는가? 왜 끝까지 가지 못하는가?
        if event.type == SDL_KEYUP:
            player.keyType = None
            player.pressing = False


def pause():
    pass


def resume():
    pass


# start to this module

if __name__ == '__main__':
    import sys

    glCurrentModule = sys.modules[__name__]
    open_canvas(900,900)
    gf.run(glCurrentModule)
    close_canvas()

